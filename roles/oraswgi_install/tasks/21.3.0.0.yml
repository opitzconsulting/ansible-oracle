---
- block:
    - debug: msg="install-home-gi | Start Extract files to ORACLE_HOME (gi)"  # noqa unnamed-task
      run_once: "{{ configure_cluster }}"

    - name: install-home-gi | Extract files to ORACLE_HOME (gi)
      unarchive: src={{ oracle_gi_image }}  dest={{ oracle_home_gi }} copy=no
      with_items: "{{ oracle_sw_image_gi }}"
      loop_control:
        label: "{{ oracle_gi_image | default ('') }}"
      args:
        creates: "{{ oracle_home_gi }}/root.sh"
      become: true
      become_user: "{{ grid_install_user }}"
      run_once: "{{ configure_cluster }}"
      when:
        - oracle_install_version_gi == item.version

  tags:
    - oragridswunpack
  when:
    - oracle_home_gi not in checkgiinstall.stdout

# Check for an existing GRID_HOME before reinstallation of OPatch
- name: install-home-gi | Check for file GridSetup.sh
  no_log: true
  stat: path={{ oracle_home_gi }}/gridSetup.sh
  register: stat_gridsetup_result
  run_once: "{{ configure_cluster }}"

- name: install-home-gi | State of GridSetup.sh
  assert:
    that: "stat_gridsetup_result.stat.exists == True"
    msg: "Cannot find {{ oracle_home_gi }}/gridSetup.sh }}"
  run_once: "{{ configure_cluster }}"

- name: check for existing cvuqdisk_rpm
  stat:
    path: "{{ oracle_home_gi }}/cv/rpm/{{ cvuqdisk_rpm }}"
  register: statcvuqdisk
  run_once: true
  when: configure_cluster
  tags: cvuqdisk

- block:  # noqa unnamed-task when: configure_cluster

    # synchronize didn't work on all environments...
    # => fetch to ansible controller
    # => copy to nodes
    - name: install-home-gi | copy cvuqdisk to ansible controller
      fetch:
        src: "{{ oracle_home_gi }}/cv/rpm/{{ cvuqdisk_rpm }}"
        dest: /tmp
        mode: 0644
      run_once: true
      when:
        - statcvuqdisk.stat.exists
      tags: cvuqdisk

    - name: install-home-gi | copy cvuqdisk to cluster nodes
      copy:
        src: "/tmp/{{ cluster_master  }}/{{ oracle_home_gi }}/cv/rpm/{{ cvuqdisk_rpm }}"
        dest: "{{ oracle_rsp_stage }}/{{ cvuqdisk_rpm }}"
        mode: 0644
      tags: cvuqdisk

    - name: install-home-gi | Install cvuqdisk rpm
      yum:
        name: "{{ oracle_rsp_stage }}/{{ cvuqdisk_rpm }}"
        state: present
        disable_gpg_check: true
      tags: cvuqdisk

  when:
    - configure_cluster
    - hostvars[cluster_master]['statcvuqdisk']['stat']['exists']
  tags: cvuqdisk

- name: install-home-gi | Setup response file for install (GI)
  template:
    src=grid-install.rsp.{{ oracle_install_version_gi }}.j2
    dest={{ oracle_rsp_stage }}/{{ oracle_grid_responsefile }}
    owner="{{ grid_install_user }}"
    group={{ oracle_group }}
    mode=0600
    backup=yes
  with_items: "{{ asm_diskgroups }}"
  run_once: "{{ configure_cluster }}"
  loop_control:
    label: "{{ oracle_rsp_stage }}/{{ oracle_grid_responsefile }}"
  tags:
    - responsefilegi
  when:
    - item.diskgroup == oracle_asm_init_dg

- block:  # when: oracle_home_gi not in checkgiinstall.stdout

    - include_tasks: runcluvfy.yml
      when:
        - force_runcluvfy | default(false) or oracle_home_gi not in checkgiinstall.stdout
      tags: always

    - debug: msg="install-home-gi | Start Install Grid Infrastructure"  # noqa unnamed-task
      run_once: true

    - name: install-home-gi | Install Grid Infrastructure
      command:
        # noqa no-changed-when
        argv:
          - "{{ oracle_home_gi }}/gridSetup.sh"
          - -responseFile
          - "{{ oracle_rsp_stage }}/{{ oracle_grid_responsefile }}"
          - -waitforcompletion
          - -silent
          - "{{ giignoreprereqparam | default(omit) }}"
      become: true
      become_user: "{{ grid_install_user }}"
      run_once: "{{ configure_cluster }}"
      tags:
        - oragridinstall
      register: giinstall
      failed_when: giinstall.rc not in [0,6]

    - debug: var=giinstall.stdout_lines  # noqa unnamed-task
      run_once: "{{ configure_cluster }}"
      when: giinstall.stdout_lines is defined

  when: oracle_home_gi not in checkgiinstall.stdout

- name: install-home-gi | include role oraswgi-manage-patches
  include_role:
    name: oraswgi-manage-patches
  when: patch_before_rootsh and apply_patches_gi

- block:  # when: oracle_home_gi not in checkgiinstall.stdout
    - name: install-home-gi | Run oraInstroot script after installation
      command: "{{ oracle_inventory_loc }}/orainstRoot.sh"
      # noqa no-changed-when
      become: true
      tags:
        - runroot

    - debug: msg="install-home-gi | Start Run root script after installation (Master Node)"  # noqa unnamed-task
      run_once: true

    - name: install-home-gi | Run root script after installation (Master Node)
      command: "{{ oracle_home_gi }}/root.sh"
      # noqa no-changed-when
      become: true
      run_once: "{{ configure_cluster }}"
      register: rootmaster
      tags:
        - runroot

    - debug: var=rootmaster.stdout_lines  # noqa unnamed-task
      run_once: "{{ configure_cluster }}"
      when: rootmaster.stdout_lines is defined

    - debug: msg="install-home-gi | Start Run root script after installation (Other Nodes)"  # noqa unnamed-task
      run_once: true

    # do not start root.sh on all nodes in parallel
    # => sleep
    - name: install-home-gi | Run root script after installation (Other Nodes)
      script: |
        /usr/bin/sleep {{ item.0 * 60 }}
        {{ oracle_home_gi }}/root.sh
      become: true
      with_indexed_items: "{{ groups[hostgroup] }}"
      tags:
        - runroot
      when:
        - configure_cluster
        - inventory_hostname != cluster_master
        - inventory_hostname == item.1
      register: rootother

    - debug: var=rootother.stdout_lines  # noqa unnamed-task
      when: rootother.stdout_lines is defined

    - name: install-home-gi | Execute ConfigTools
      command: "{{ oracle_home_gi }}/gridSetup.sh -executeConfigTools -responseFile {{ oracle_rsp_stage }}/{{ oracle_grid_responsefile }} -silent"
      become: true
      become_user: "{{ grid_install_user }}"
      run_once: "{{ configure_cluster }}"
      tags:
        - runconfigtool
      when:
        - run_configtoolallcommand
      ignore_errors: true
      register: configtool

  when:
    - oracle_home_gi not in checkgiinstall.stdout
